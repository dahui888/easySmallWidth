buildscript {
    repositories {
        jcenter()
    }
}
// First, apply the publishing plugin
plugins {
    id "com.gradle.plugin-publish" version "0.12.0"
    id "java-gradle-plugin"
    // Apply other plugins here, e.g. the kotlin plugin for a plugin written in Kotlin
    // or the groovy plugin if the plugin uses Groovy
}

apply plugin: 'groovy'
apply plugin: 'maven'


dependencies {
    compile gradleApi()
    compile localGroovy()
}

allprojects {
    repositories {
        jcenter()
    }
}


compileGroovy {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    options.encoding = "UTF-8"

}
subprojects {
    tasks.withType(Javadoc).all { enabled = false }
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}


//publish to local directory
def versionName = getProperty("gradle.properties","versionName")
group "com.txl.plugin"
version versionName


uploadArchives{ //当前项目可以发布到本地文件夹中
    repositories {
        mavenDeployer {
            repository(url: uri('./repo')) //定义本地maven仓库的地址
        }
    }
}


// 读取bintay账户信息
Properties properties = new Properties()
InputStream inputStream = project.rootProject.file('local.properties').newDataInputStream()
properties.load(inputStream)
inputStream.close()




// If your plugin has any external java dependencies, Gradle will attempt to
// download them from JCenter for anyone using the plugins DSL
// so you should probably use JCenter for dependency resolution in your own
// project.
repositories {
    jcenter()
}

// Use java-gradle-plugin to generate plugin descriptors and specify plugin ids
gradlePlugin {
    plugins {
        easySmallWidthPlugin {
            id = 'com.txl.easySmallWidth'
            implementationClass = 'com.txl.plugin.BuildAdaptionPlugin'
        }
    }
}

pluginBundle {
    // These settings are set for the whole plugin bundle
    website = 'https://github.com/xiaolutang/easySmallWidth'
    vcsUrl = 'https://github.com/xiaolutang/easySmallWidth'

    // tags and description can be set for the whole bundle here, but can also
    // be set / overridden in the config for specific plugins
    description = 'An android screen adaptation plug-in '

    // The plugins block can contain multiple plugin entries.
    //
    // The name for each plugin block below (greetingsPlugin, goodbyePlugin)
    // does not affect the plugin configuration, but they need to be unique
    // for each plugin.

    // Plugin config blocks can set the id, displayName, version, description
    // and tags for each plugin.

    // id and displayName are mandatory.
    // If no version is set, the project version will be used.
    // If no tags or description are set, the tags or description from the
    // pluginBundle block will be used, but they must be set in one of the
    // two places.

    plugins {
        // first plugin
        easySmallWidthPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'EasySmallWidth'
            tags = ['individual', 'tags', 'per', 'plugin']
            version = '1.0.0'
        }
    }

    // Optional overrides for Maven coordinates.
    // If you have an existing plugin deployed to Bintray and would like to keep
    // your existing group ID and artifact ID for continuity, you can specify
    // them here.
    //
    // As publishing to a custom group requires manual approval by the Gradle
    // team for security reasons, we recommend not overriding the group ID unless
    // you have an existing group ID that you wish to keep. If not overridden,
    // plugins will be published automatically without a manual approval process.
    //
    // You can also override the version of the deployed artifact here, though it
    // defaults to the project version, which would normally be sufficient.

    mavenCoordinates {
        groupId = "com.txl.easySmallWidth"
        artifactId = "easySmallWidth"
        version = "1.0.0"
    }
}